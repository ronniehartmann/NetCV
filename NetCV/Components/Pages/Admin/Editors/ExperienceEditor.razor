@using Application.Services.Resources
@using NetCV.Components.Pages.Admin.DialogCards
@using NetCV.Components.Pages.Shared
@using Microsoft.AspNetCore.Authorization

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ResourceService<ExperienceDto> ExperienceService

@rendermode InteractiveServer
@attribute [Authorize]
@page "/Admin/Experience"

<PageTitle>Admin - Experience</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenText TextStyle="TextStyle.H3" Text="Work Experience" />
    <RadzenButton Text="Add Experience" Icon="add" Click="OpenCreateDialogAsync" Variant="Variant.Flat" />
</RadzenStack>

<LoadingIndicator IsLoading="Experiences is null" />

@if (Experiences is not null && !Experiences.Any())
{
    <RadzenText Text="No experiences created yet" />
}
else if (Experiences is not null)
{
    @foreach (var experience in Experiences)
    {
        <RadzenCard Variant="Variant.Filled" class="p-3">
            <RadzenText TextStyle="TextStyle.H5" Text="@experience.Company" />
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenLabel Component="Company" Text="Company" />
                    <RadzenTextBox Name="Company" Value="@experience.Company" class="w-100" Change="company => { experience.Company = company; HasChanges = true; }" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Component="StartDate" Text="Start Date" />
                    <RadzenDatePicker TValue="DateOnly" Name="StartDate" Value="@experience.StartDate" class="w-100" Change="startDate => { experience.StartDate = DateOnly.FromDateTime(startDate ?? DateTime.MinValue); HasChanges = true; }" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Component="EndDate" Text="End Date" />
                    <RadzenDatePicker TValue="DateOnly" Name="EndDate" Value="@experience.EndDate" class="w-100" Change="endDate => { experience.EndDate = DateOnly.FromDateTime(endDate ?? DateTime.MinValue); HasChanges = true; }" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Left" Gap="5px">
                        <RadzenLabel Component="CompanyLink" Text="Company Link" />
                        <RadzenIcon Icon="link" />
                    </RadzenStack>
                    <RadzenTextBox Name="CompanyLink" Value="@experience.CompanyLink" class="w-100" Change="companyLink => { experience.CompanyLink = companyLink; HasChanges = true; }" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Component="Text" Text="Text" />
                    <RadzenTextBox Name="Text" Value="@experience.Text" class="w-100" Change="text => { experience.Text = text; HasChanges = true; }" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="1" Style="text-align: right;">
                    <RadzenLabel class="w-100" />
                    <RadzenButton Variant="Variant.Flat" ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="async () => await DeleteExperienceAsync(experience.Id)" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    }
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <RadzenButton Variant="Variant.Flat" Text="Cancel"
                      Visible="HasChanges" ButtonStyle="ButtonStyle.Info" Shade="Shade.Lighter"
                      Click="async () => await CancelChangesAsync()" />
        <RadzenButton Variant="Variant.Flat" Icon="done"
                      Text="Save changes" Click="async () => await SaveChangesAsync()"
                      Disabled="!HasChanges" />
    </RadzenStack>
}

@code {
    private IList<ExperienceDto>? Experiences;
    private bool HasChanges;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Experiences = (await ExperienceService.GetResourcesAsync()).ToList();
            StateHasChanged();

            DialogService.OnClose += async x =>
            {
                Experiences = (await ExperienceService.GetResourcesAsync()).ToList();
                StateHasChanged();
            };
        }
    }

    private async Task SaveChangesAsync()
    {
        if (HasChanges)
        {
            foreach (var experience in Experiences!)
            {
                await ExperienceService.UpdateResourceAsync(experience);
            }
            HasChanges = false;
            NotificationService.Notify(NotificationSeverity.Success,
                "Updated experiences", "Experiences were updated.");
        }
    }

    private async Task CancelChangesAsync()
    {
        Experiences = (await ExperienceService.GetResourcesAsync()).ToList();
        HasChanges = false;
    }

    private async Task OpenCreateDialogAsync()
    {
        var options = new DialogOptions
            {
                Width = "700px"
            };

        await DialogService.OpenAsync<CreateExperienceCard>("Add Experience", options: options);
    }

    private async Task DeleteExperienceAsync(long id)
    {
        await ExperienceService.DeleteResourceAsync(id);

        var existingDbExperience = Experiences!.Single(e => e.Id == id);
        Experiences!.Remove(existingDbExperience);

        NotificationService.Notify(NotificationSeverity.Success,
            "Deleted experience", $"Experience '{existingDbExperience.Company}' was deleted.");
    }
}
