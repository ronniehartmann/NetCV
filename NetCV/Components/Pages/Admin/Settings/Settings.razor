@using Application.Services.Settings
@using Infrastructure.Services
@using Microsoft.AspNetCore.Authorization
@using NetCV.Components.Pages.Admin.Editors
@using NetCV.Extensions

@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject FileUploadService FileUploadService
@inject ISettingsService SettingsService

@rendermode InteractiveServer
@attribute [Authorize]
@page "/Admin/Settings"

<PageTitle>Admin - Settings</PageTitle>

<RadzenText TextStyle="TextStyle.H3" Text="Settings" />

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenText TextStyle="TextStyle.DisplayH4" Text="Images" />
    <RadzenIcon Icon="image" />
</RadzenStack>
<RadzenRow>
    <RadzenColumn Size="12" SizeLG="6">
        <RadzenCard Variant="Variant.Filled" class="p-4">
            <RadzenText TextStyle="TextStyle.H6" Text="Favicon" />
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <label for="favicon-upload" class="rz-button rz-button-md rz-variant-flat rz-info rz-shade-default text-center">
                        <RadzenIcon Icon="upload" />
                        Upload
                    </label>
                    <InputFile id="favicon-upload" OnChange="UpdateFavIconAsync" style="display: none;" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8" class="text-end">
                    @if (!string.IsNullOrEmpty(FavIconFileName))
                    {
                        <img src="@($"images/{FavIconFileName}")" class="portrait-image" />
                    }
                    else
                    {
                        <img src="https://i.gifer.com/ZKZg.gif" class="portrait-image" alt="Loading Favicon" style="padding: 50px;" />
                    }
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeLG="6">
        <RadzenCard Variant="Variant.Filled" class="p-4">
            <RadzenText TextStyle="TextStyle.H6" Text="Portrait" />
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <label for="portrait-upload" class="rz-button rz-button-md rz-variant-flat rz-info rz-shade-default text-center">
                        <RadzenIcon Icon="upload" />
                        Upload
                    </label>
                    <InputFile id="portrait-upload" OnChange="UpdatePortraitAsync" style="display: none;" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8" class="text-end">
                    @if (!string.IsNullOrEmpty(PortraitFileName))
                    {
                        <img src="@($"images/{PortraitFileName}")" class="portrait-image" />
                    }
                    else
                    {
                        <img src="https://i.gifer.com/ZKZg.gif" class="portrait-image" alt="Loading Portrait" style="padding: 50px;" />
                    }
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeLG="6">
        <RadzenCard Variant="Variant.Filled" class="p-4">
            <RadzenText TextStyle="TextStyle.H6" Text="Background" />
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <label for="background-upload" class="rz-button rz-button-md rz-variant-flat rz-info rz-shade-default text-center">
                        <RadzenIcon Icon="upload" />
                        Upload
                    </label>
                    <InputFile id="background-upload" OnChange="UpdateBackgroundAsync" style="display: none;" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8" class="text-end">
                    @if (!string.IsNullOrEmpty(BackgroundFileName))
                    {
                        <img src="@($"images/{BackgroundFileName}")" class="background-image" />
                    }
                    else
                    {
                        <img src="https://i.gifer.com/ZKZg.gif" class="background-image" alt="Loading Background Image" style="padding: 50px;" />
                    }
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>
<br />

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenText TextStyle="TextStyle.DisplayH4" Text="Banner" />
    <RadzenIcon Icon="ad_units" />
</RadzenStack>
<RadzenCard Variant="Variant.Filled">
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard Variant="Variant.Outlined" class="p-3">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenLabel Text="Show 'Hire Me' Button" Component="showHireMe" />
                    <RadzenCheckBox Name="showHireMe" TValue="bool" Value="ShowHireMe" Change="UpdateShowHireMeAsync" />
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>
<br />

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenText TextStyle="TextStyle.DisplayH4" Text="Footer" />
    <RadzenIcon Icon="view_day" />
</RadzenStack>
<RadzenCard Variant="Variant.Filled">
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard Variant="Variant.Outlined" class="p-3">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenLabel Text="Show Footer" Component="showFooter" />
                    <RadzenCheckBox Name="showFooter" TValue="bool" Value="ShowFooter" Change="UpdateShowFooterAsync" />
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6"></RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard Variant="Variant.Outlined" class="p-3">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenLabel Text="@("Show Version")" Component="showVersion" Style="@(!ShowFooter ? "color: gray;" : "")" />
                    <RadzenCheckBox Disabled="!ShowFooter" Name="showVersion" TValue="bool" Value="ShowVersion" Change="UpdateShowVersionAsync" />
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard Variant="Variant.Outlined" class="p-3">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenLabel Text="@("Show \"Powered by NetCV\"")" Component="showPoweredByNetCv" Style="@(!ShowFooter ? "color: gray;" : "")" />
                    <RadzenCheckBox Disabled="!ShowFooter" Name="showPoweredByNetCv" TValue="bool" Value="ShowPoweredByNetCv" Change="UpdateShowPoweredByNetCvAsync" />
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>
<br />

<ContentEditor />

@code {
    private string FavIconFileName = string.Empty;
    private string PortraitFileName = string.Empty;
    private string BackgroundFileName = string.Empty;
    private bool ShowHireMe = true;
    private bool ShowFooter = true;
    private bool ShowVersion = true;
    private bool ShowPoweredByNetCv = true;

    protected override async Task OnInitializedAsync()
    {
        FavIconFileName = await SettingsService.GetFavIconFileNameAsync();
        PortraitFileName = await SettingsService.GetPortraitFileNameAsync();
        BackgroundFileName = await SettingsService.GetBackgroundFileNameAsync();
        ShowHireMe = await SettingsService.GetShowHireMeAsync();
        ShowFooter = await SettingsService.GetShowFooterAsync();
        ShowVersion = await SettingsService.GetShowVersionAsync();
        ShowPoweredByNetCv = await SettingsService.GetShowPoweredByNetCvAsync();
    }

    private async Task UpdateFavIconAsync(InputFileChangeEventArgs args)
    {
        if (!await args.File.IsImageAsync())
        {
            NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "File type is not supported.");
            return;
        }

        try
        {
            using var stream = args.File.OpenReadStream();
            var fileName = GenerateFileName(args.File.Name);
            var oldFileName = await SettingsService.GetFavIconFileNameAsync();

            if (await FileUploadService.UploadFileAsync(stream, $"wwwroot/images/{fileName}", 2097152))
            {
                await SettingsService.UpdateFavIconFileNameAsync(fileName);
                FileUploadService.RemoveFile($"wwwroot/images/{oldFileName}");
                FavIconFileName = fileName;
                NotificationService.Notify(NotificationSeverity.Success, "Image uploaded", "The favicon has successfully been updated.");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "An error occured. Please try again.");
            }
        }
        catch (IOException e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "An error occured. Please try again.");
        }
    }

    private async Task UpdatePortraitAsync(InputFileChangeEventArgs args)
    {
        if (!await args.File.IsImageAsync())
        {
            NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "File type is not supported.");
            return;
        }

        try
        {
            using var stream = args.File.OpenReadStream();
            var fileName = GenerateFileName(args.File.Name);
            var oldFileName = await SettingsService.GetPortraitFileNameAsync();

            if (await FileUploadService.UploadFileAsync(stream, $"wwwroot/images/{fileName}", 2097152))
            {
                await SettingsService.UpdatePortraitFileNameAsync(fileName);
                FileUploadService.RemoveFile($"wwwroot/images/{oldFileName}");
                PortraitFileName = fileName;
                NotificationService.Notify(NotificationSeverity.Success, "Image uploaded", "The portrait has successfully been updated.");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "An error occured. Please try again.");
            }
        }
        catch (IOException e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "An error occured. Please try again.");
        }
    }

    private async Task UpdateBackgroundAsync(InputFileChangeEventArgs args)
    {
        if (args.File.Size > 2097152)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "Maximum file size of 2 MB exceeded.");
            return;
        }

        if (!await args.File.IsImageAsync())
        {
            NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "File type is not supported.");
            return;
        }

        try
        {
            using var stream = args.File.OpenReadStream(2097152);
            var fileName = GenerateFileName(args.File.Name);
            var oldFileName = await SettingsService.GetBackgroundFileNameAsync();

            if (await FileUploadService.UploadFileAsync(stream, $"wwwroot/images/{fileName}", 2097152))
            {
                await SettingsService.UpdateBackgroundFileNameAsync(fileName);
                FileUploadService.RemoveFile($"wwwroot/images/{oldFileName}");
                BackgroundFileName = fileName;
                NotificationService.Notify(NotificationSeverity.Success, "Image uploaded", "The background has successfully been updated.");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "An error occured. Please try again.");
            }
        }
        catch (IOException e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Image not uploaded", "An error occured. Please try again.");
        }
    }

    private async Task UpdateShowHireMeAsync(bool showHireMe)
    {
        await SettingsService.UpdateShowHireMeAsync(showHireMe);
        NotificationService.Notify(NotificationSeverity.Success, "Updated 'Show Hire Me'", $"'Show Hire Me' has been {(showHireMe ? "enabled" : "disabled")}");
        ShowHireMe = showHireMe;
    }

    private async Task UpdateShowFooterAsync(bool showFooter)
    {
        await SettingsService.UpdateShowFooterAsync(showFooter);
        ShowFooter = showFooter;
        NotificationService.Notify(NotificationSeverity.Success, "Updated 'Show Footer'", $"'Show Footer' has been {(showFooter ? "enabled" : "disabled")}");
        NavigationManager.Refresh();
    }

    private async Task UpdateShowVersionAsync(bool showVersion)
    {
        await SettingsService.UpdateShowVersionAsync(showVersion);
        ShowVersion = showVersion;
        NotificationService.Notify(NotificationSeverity.Success, "Updated 'Show Version'", $"'Show Version' has been {(showVersion ? "enabled" : "disabled")}");
        NavigationManager.Refresh();
    }

    private async Task UpdateShowPoweredByNetCvAsync(bool showPoweredByNetCv)
    {
        await SettingsService.UpdateShowPoweredByNetCvAsync(showPoweredByNetCv);
        ShowPoweredByNetCv = showPoweredByNetCv;
        NotificationService.Notify(NotificationSeverity.Success, "Updated 'Show Powered By NetCV'", $"'Show Powered By NetCV' has been {(showPoweredByNetCv ? "enabled" : "disabled")}");
        NavigationManager.Refresh();
    }

    private string GenerateFileName(string name)
    {
        var guid = Guid.NewGuid();
        var extension = Path.GetExtension(name);
        return $"{guid}{extension}";
    }
}
